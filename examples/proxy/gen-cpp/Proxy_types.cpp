/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Proxy_types.h"

#include <algorithm>

namespace rdd { namespace proxy {

int _kResultCodeValues[] = {
  ResultCode::OK,
  ResultCode::E_SOURCE__UNTRUSTED,
  ResultCode::E_BACKEND_FAILURE
};
const char* _kResultCodeNames[] = {
  "OK",
  "E_SOURCE__UNTRUSTED",
  "E_BACKEND_FAILURE"
};
const std::map<int, const char*> _ResultCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kResultCodeValues, _kResultCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* Query::ascii_fingerprint = "4BF81DD46A7371532E49811022D58D36";
const uint8_t Query::binary_fingerprint[16] = {0x4B,0xF8,0x1D,0xD4,0x6A,0x73,0x71,0x53,0x2E,0x49,0x81,0x10,0x22,0xD5,0x8D,0x36};

uint32_t Query::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_traceid = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->traceid);
          isset_traceid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->query);
          this->__isset.query = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->forward);
          this->__isset.forward = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_traceid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Query::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Query");

  xfer += oprot->writeFieldBegin("traceid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->traceid);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.query) {
    xfer += oprot->writeFieldBegin("query", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->query);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.forward) {
    xfer += oprot->writeFieldBegin("forward", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->forward);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Query &a, Query &b) {
  using ::std::swap;
  swap(a.traceid, b.traceid);
  swap(a.query, b.query);
  swap(a.forward, b.forward);
  swap(a.__isset, b.__isset);
}

const char* Result::ascii_fingerprint = "214512252A0944207CAC77897767CC5E";
const uint8_t Result::binary_fingerprint[16] = {0x21,0x45,0x12,0x25,0x2A,0x09,0x44,0x20,0x7C,0xAC,0x77,0x89,0x77,0x67,0xCC,0x5E};

uint32_t Result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_traceid = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->traceid);
          isset_traceid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->code = (ResultCode::type)ecast0;
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_traceid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Result::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Result");

  xfer += oprot->writeFieldBegin("traceid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->traceid);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.code) {
    xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32((int32_t)this->code);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Result &a, Result &b) {
  using ::std::swap;
  swap(a.traceid, b.traceid);
  swap(a.code, b.code);
  swap(a.__isset, b.__isset);
}

}} // namespace
