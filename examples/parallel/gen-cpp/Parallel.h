/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Parallel_H
#define Parallel_H

#include <thrift/TDispatchProcessor.h>
#include "Parallel_types.h"

namespace rdd { namespace parallel {

class ParallelIf {
 public:
  virtual ~ParallelIf() {}
  virtual void run(Result& _return, const Query& query) = 0;
};

class ParallelIfFactory {
 public:
  typedef ParallelIf Handler;

  virtual ~ParallelIfFactory() {}

  virtual ParallelIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ParallelIf* /* handler */) = 0;
};

class ParallelIfSingletonFactory : virtual public ParallelIfFactory {
 public:
  ParallelIfSingletonFactory(const boost::shared_ptr<ParallelIf>& iface) : iface_(iface) {}
  virtual ~ParallelIfSingletonFactory() {}

  virtual ParallelIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ParallelIf* /* handler */) {}

 protected:
  boost::shared_ptr<ParallelIf> iface_;
};

class ParallelNull : virtual public ParallelIf {
 public:
  virtual ~ParallelNull() {}
  void run(Result& /* _return */, const Query& /* query */) {
    return;
  }
};

typedef struct _Parallel_run_args__isset {
  _Parallel_run_args__isset() : query(false) {}
  bool query;
} _Parallel_run_args__isset;

class Parallel_run_args {
 public:

  Parallel_run_args() {
  }

  virtual ~Parallel_run_args() throw() {}

  Query query;

  _Parallel_run_args__isset __isset;

  void __set_query(const Query& val) {
    query = val;
  }

  bool operator == (const Parallel_run_args & rhs) const
  {
    if (!(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const Parallel_run_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Parallel_run_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Parallel_run_pargs {
 public:


  virtual ~Parallel_run_pargs() throw() {}

  const Query* query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Parallel_run_result__isset {
  _Parallel_run_result__isset() : success(false) {}
  bool success;
} _Parallel_run_result__isset;

class Parallel_run_result {
 public:

  Parallel_run_result() {
  }

  virtual ~Parallel_run_result() throw() {}

  Result success;

  _Parallel_run_result__isset __isset;

  void __set_success(const Result& val) {
    success = val;
  }

  bool operator == (const Parallel_run_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Parallel_run_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Parallel_run_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Parallel_run_presult__isset {
  _Parallel_run_presult__isset() : success(false) {}
  bool success;
} _Parallel_run_presult__isset;

class Parallel_run_presult {
 public:


  virtual ~Parallel_run_presult() throw() {}

  Result* success;

  _Parallel_run_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ParallelClient : virtual public ParallelIf {
 public:
  ParallelClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ParallelClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void run(Result& _return, const Query& query);
  void send_run(const Query& query);
  void recv_run(Result& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ParallelProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ParallelIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ParallelProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_run(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ParallelProcessor(boost::shared_ptr<ParallelIf> iface) :
    iface_(iface) {
    processMap_["run"] = &ParallelProcessor::process_run;
  }

  virtual ~ParallelProcessor() {}
};

class ParallelProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ParallelProcessorFactory(const ::boost::shared_ptr< ParallelIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ParallelIfFactory > handlerFactory_;
};

class ParallelMultiface : virtual public ParallelIf {
 public:
  ParallelMultiface(std::vector<boost::shared_ptr<ParallelIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ParallelMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ParallelIf> > ifaces_;
  ParallelMultiface() {}
  void add(boost::shared_ptr<ParallelIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void run(Result& _return, const Query& query) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->run(_return, query);
    }
    ifaces_[i]->run(_return, query);
    return;
  }

};

}} // namespace

#endif
