/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Parallel_TYPES_H
#define Parallel_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace rdd { namespace parallel {

struct ResultCode {
  enum type {
    OK = 0,
    E_SOURCE__UNTRUSTED = 1001,
    E_BACKEND_FAILURE = 1002
  };
};

extern const std::map<int, const char*> _ResultCode_VALUES_TO_NAMES;

typedef struct _Query__isset {
  _Query__isset() : query(false) {}
  bool query;
} _Query__isset;

class Query {
 public:

  static const char* ascii_fingerprint; // = "5B708A954C550ECA9C1A49D3C5CAFAB9";
  static const uint8_t binary_fingerprint[16]; // = {0x5B,0x70,0x8A,0x95,0x4C,0x55,0x0E,0xCA,0x9C,0x1A,0x49,0xD3,0xC5,0xCA,0xFA,0xB9};

  Query() : traceid(), query() {
  }

  virtual ~Query() throw() {}

  std::string traceid;
  std::string query;

  _Query__isset __isset;

  void __set_traceid(const std::string& val) {
    traceid = val;
  }

  void __set_query(const std::string& val) {
    query = val;
    __isset.query = true;
  }

  bool operator == (const Query & rhs) const
  {
    if (!(traceid == rhs.traceid))
      return false;
    if (__isset.query != rhs.__isset.query)
      return false;
    else if (__isset.query && !(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const Query &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Query & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Query &a, Query &b);

typedef struct _Result__isset {
  _Result__isset() : code(false) {}
  bool code;
} _Result__isset;

class Result {
 public:

  static const char* ascii_fingerprint; // = "214512252A0944207CAC77897767CC5E";
  static const uint8_t binary_fingerprint[16]; // = {0x21,0x45,0x12,0x25,0x2A,0x09,0x44,0x20,0x7C,0xAC,0x77,0x89,0x77,0x67,0xCC,0x5E};

  Result() : traceid(), code((ResultCode::type)0) {
  }

  virtual ~Result() throw() {}

  std::string traceid;
  ResultCode::type code;

  _Result__isset __isset;

  void __set_traceid(const std::string& val) {
    traceid = val;
  }

  void __set_code(const ResultCode::type val) {
    code = val;
    __isset.code = true;
  }

  bool operator == (const Result & rhs) const
  {
    if (!(traceid == rhs.traceid))
      return false;
    if (__isset.code != rhs.__isset.code)
      return false;
    else if (__isset.code && !(code == rhs.code))
      return false;
    return true;
  }
  bool operator != (const Result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Result &a, Result &b);

}} // namespace

#endif
