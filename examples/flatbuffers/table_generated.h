// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TABLE_RDD_FBS_H_
#define FLATBUFFERS_GENERATED_TABLE_RDD_FBS_H_

#include "flatbuffers/flatbuffers.h"

namespace rdd {
namespace fbs {

struct Query;

struct Result;

enum ResultCode {
  ResultCode_OK = 0,
  ResultCode_E_SOURCE__UNTRUSTED = 1001,
  ResultCode_E_BACKEND_FAILURE = 1002,
  ResultCode_MIN = ResultCode_OK,
  ResultCode_MAX = ResultCode_E_BACKEND_FAILURE
};

inline ResultCode (&EnumValuesResultCode())[3] {
  static ResultCode values[] = {
    ResultCode_OK,
    ResultCode_E_SOURCE__UNTRUSTED,
    ResultCode_E_BACKEND_FAILURE
  };
  return values;
}

struct Query FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TRACEID = 4,
    VT_QUERY = 6,
    VT_FORWARD = 8
  };
  const flatbuffers::String *traceid() const {
    return GetPointer<const flatbuffers::String *>(VT_TRACEID);
  }
  const flatbuffers::String *query() const {
    return GetPointer<const flatbuffers::String *>(VT_QUERY);
  }
  const flatbuffers::String *forward() const {
    return GetPointer<const flatbuffers::String *>(VT_FORWARD);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TRACEID) &&
           verifier.Verify(traceid()) &&
           VerifyOffset(verifier, VT_QUERY) &&
           verifier.Verify(query()) &&
           VerifyOffset(verifier, VT_FORWARD) &&
           verifier.Verify(forward()) &&
           verifier.EndTable();
  }
};

struct QueryBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_traceid(flatbuffers::Offset<flatbuffers::String> traceid) {
    fbb_.AddOffset(Query::VT_TRACEID, traceid);
  }
  void add_query(flatbuffers::Offset<flatbuffers::String> query) {
    fbb_.AddOffset(Query::VT_QUERY, query);
  }
  void add_forward(flatbuffers::Offset<flatbuffers::String> forward) {
    fbb_.AddOffset(Query::VT_FORWARD, forward);
  }
  QueryBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  QueryBuilder &operator=(const QueryBuilder &);
  flatbuffers::Offset<Query> Finish() {
    const auto end = fbb_.EndTable(start_, 3);
    auto o = flatbuffers::Offset<Query>(end);
    return o;
  }
};

inline flatbuffers::Offset<Query> CreateQuery(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> traceid = 0,
    flatbuffers::Offset<flatbuffers::String> query = 0,
    flatbuffers::Offset<flatbuffers::String> forward = 0) {
  QueryBuilder builder_(_fbb);
  builder_.add_forward(forward);
  builder_.add_query(query);
  builder_.add_traceid(traceid);
  return builder_.Finish();
}

inline flatbuffers::Offset<Query> CreateQueryDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *traceid = nullptr,
    const char *query = nullptr,
    const char *forward = nullptr) {
  return rdd::fbs::CreateQuery(
      _fbb,
      traceid ? _fbb.CreateString(traceid) : 0,
      query ? _fbb.CreateString(query) : 0,
      forward ? _fbb.CreateString(forward) : 0);
}

struct Result FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TRACEID = 4,
    VT_CODE = 6
  };
  const flatbuffers::String *traceid() const {
    return GetPointer<const flatbuffers::String *>(VT_TRACEID);
  }
  ResultCode code() const {
    return static_cast<ResultCode>(GetField<int32_t>(VT_CODE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TRACEID) &&
           verifier.Verify(traceid()) &&
           VerifyField<int32_t>(verifier, VT_CODE) &&
           verifier.EndTable();
  }
};

struct ResultBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_traceid(flatbuffers::Offset<flatbuffers::String> traceid) {
    fbb_.AddOffset(Result::VT_TRACEID, traceid);
  }
  void add_code(ResultCode code) {
    fbb_.AddElement<int32_t>(Result::VT_CODE, static_cast<int32_t>(code), 0);
  }
  ResultBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ResultBuilder &operator=(const ResultBuilder &);
  flatbuffers::Offset<Result> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<Result>(end);
    return o;
  }
};

inline flatbuffers::Offset<Result> CreateResult(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> traceid = 0,
    ResultCode code = ResultCode_OK) {
  ResultBuilder builder_(_fbb);
  builder_.add_code(code);
  builder_.add_traceid(traceid);
  return builder_.Finish();
}

inline flatbuffers::Offset<Result> CreateResultDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *traceid = nullptr,
    ResultCode code = ResultCode_OK) {
  return rdd::fbs::CreateResult(
      _fbb,
      traceid ? _fbb.CreateString(traceid) : 0,
      code);
}

}  // namespace fbs
}  // namespace rdd

#endif  // FLATBUFFERS_GENERATED_TABLE_RDD_FBS_H_
