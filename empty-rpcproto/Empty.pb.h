// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Empty.proto

#ifndef PROTOBUF_Empty_2eproto__INCLUDED
#define PROTOBUF_Empty_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace rdd_pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Empty_2eproto();
void protobuf_AssignDesc_Empty_2eproto();
void protobuf_ShutdownFile_Empty_2eproto();

class Query;
class Result;

enum ResultCode {
  OK = 0,
  E_SOURCE__UNTRUSTED = 1001
};
bool ResultCode_IsValid(int value);
const ResultCode ResultCode_MIN = OK;
const ResultCode ResultCode_MAX = E_SOURCE__UNTRUSTED;
const int ResultCode_ARRAYSIZE = ResultCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResultCode_descriptor();
inline const ::std::string& ResultCode_Name(ResultCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResultCode_descriptor(), value);
}
inline bool ResultCode_Parse(
    const ::std::string& name, ResultCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResultCode>(
    ResultCode_descriptor(), name, value);
}
// ===================================================================

class Query : public ::google::protobuf::Message {
 public:
  Query();
  virtual ~Query();

  Query(const Query& from);

  inline Query& operator=(const Query& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Query& default_instance();

  void Swap(Query* other);

  // implements Message ----------------------------------------------

  Query* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Query& from);
  void MergeFrom(const Query& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string traceid = 1;
  inline bool has_traceid() const;
  inline void clear_traceid();
  static const int kTraceidFieldNumber = 1;
  inline const ::std::string& traceid() const;
  inline void set_traceid(const ::std::string& value);
  inline void set_traceid(const char* value);
  inline void set_traceid(const char* value, size_t size);
  inline ::std::string* mutable_traceid();
  inline ::std::string* release_traceid();
  inline void set_allocated_traceid(::std::string* traceid);

  // optional string query = 2;
  inline bool has_query() const;
  inline void clear_query();
  static const int kQueryFieldNumber = 2;
  inline const ::std::string& query() const;
  inline void set_query(const ::std::string& value);
  inline void set_query(const char* value);
  inline void set_query(const char* value, size_t size);
  inline ::std::string* mutable_query();
  inline ::std::string* release_query();
  inline void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:rdd_pb.Query)
 private:
  inline void set_has_traceid();
  inline void clear_has_traceid();
  inline void set_has_query();
  inline void clear_has_query();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* traceid_;
  ::std::string* query_;
  friend void  protobuf_AddDesc_Empty_2eproto();
  friend void protobuf_AssignDesc_Empty_2eproto();
  friend void protobuf_ShutdownFile_Empty_2eproto();

  void InitAsDefaultInstance();
  static Query* default_instance_;
};
// -------------------------------------------------------------------

class Result : public ::google::protobuf::Message {
 public:
  Result();
  virtual ~Result();

  Result(const Result& from);

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Result& default_instance();

  void Swap(Result* other);

  // implements Message ----------------------------------------------

  Result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Result& from);
  void MergeFrom(const Result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string traceid = 1;
  inline bool has_traceid() const;
  inline void clear_traceid();
  static const int kTraceidFieldNumber = 1;
  inline const ::std::string& traceid() const;
  inline void set_traceid(const ::std::string& value);
  inline void set_traceid(const char* value);
  inline void set_traceid(const char* value, size_t size);
  inline ::std::string* mutable_traceid();
  inline ::std::string* release_traceid();
  inline void set_allocated_traceid(::std::string* traceid);

  // optional .rdd_pb.ResultCode code = 2;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 2;
  inline ::rdd_pb::ResultCode code() const;
  inline void set_code(::rdd_pb::ResultCode value);

  // @@protoc_insertion_point(class_scope:rdd_pb.Result)
 private:
  inline void set_has_traceid();
  inline void clear_has_traceid();
  inline void set_has_code();
  inline void clear_has_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* traceid_;
  int code_;
  friend void  protobuf_AddDesc_Empty_2eproto();
  friend void protobuf_AssignDesc_Empty_2eproto();
  friend void protobuf_ShutdownFile_Empty_2eproto();

  void InitAsDefaultInstance();
  static Result* default_instance_;
};
// ===================================================================


// ===================================================================

// Query

// required string traceid = 1;
inline bool Query::has_traceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Query::set_has_traceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Query::clear_has_traceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Query::clear_traceid() {
  if (traceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    traceid_->clear();
  }
  clear_has_traceid();
}
inline const ::std::string& Query::traceid() const {
  // @@protoc_insertion_point(field_get:rdd_pb.Query.traceid)
  return *traceid_;
}
inline void Query::set_traceid(const ::std::string& value) {
  set_has_traceid();
  if (traceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    traceid_ = new ::std::string;
  }
  traceid_->assign(value);
  // @@protoc_insertion_point(field_set:rdd_pb.Query.traceid)
}
inline void Query::set_traceid(const char* value) {
  set_has_traceid();
  if (traceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    traceid_ = new ::std::string;
  }
  traceid_->assign(value);
  // @@protoc_insertion_point(field_set_char:rdd_pb.Query.traceid)
}
inline void Query::set_traceid(const char* value, size_t size) {
  set_has_traceid();
  if (traceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    traceid_ = new ::std::string;
  }
  traceid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rdd_pb.Query.traceid)
}
inline ::std::string* Query::mutable_traceid() {
  set_has_traceid();
  if (traceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    traceid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:rdd_pb.Query.traceid)
  return traceid_;
}
inline ::std::string* Query::release_traceid() {
  clear_has_traceid();
  if (traceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = traceid_;
    traceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Query::set_allocated_traceid(::std::string* traceid) {
  if (traceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete traceid_;
  }
  if (traceid) {
    set_has_traceid();
    traceid_ = traceid;
  } else {
    clear_has_traceid();
    traceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:rdd_pb.Query.traceid)
}

// optional string query = 2;
inline bool Query::has_query() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Query::set_has_query() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Query::clear_has_query() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Query::clear_query() {
  if (query_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    query_->clear();
  }
  clear_has_query();
}
inline const ::std::string& Query::query() const {
  // @@protoc_insertion_point(field_get:rdd_pb.Query.query)
  return *query_;
}
inline void Query::set_query(const ::std::string& value) {
  set_has_query();
  if (query_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    query_ = new ::std::string;
  }
  query_->assign(value);
  // @@protoc_insertion_point(field_set:rdd_pb.Query.query)
}
inline void Query::set_query(const char* value) {
  set_has_query();
  if (query_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    query_ = new ::std::string;
  }
  query_->assign(value);
  // @@protoc_insertion_point(field_set_char:rdd_pb.Query.query)
}
inline void Query::set_query(const char* value, size_t size) {
  set_has_query();
  if (query_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    query_ = new ::std::string;
  }
  query_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rdd_pb.Query.query)
}
inline ::std::string* Query::mutable_query() {
  set_has_query();
  if (query_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    query_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:rdd_pb.Query.query)
  return query_;
}
inline ::std::string* Query::release_query() {
  clear_has_query();
  if (query_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = query_;
    query_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Query::set_allocated_query(::std::string* query) {
  if (query_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete query_;
  }
  if (query) {
    set_has_query();
    query_ = query;
  } else {
    clear_has_query();
    query_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:rdd_pb.Query.query)
}

// -------------------------------------------------------------------

// Result

// required string traceid = 1;
inline bool Result::has_traceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Result::set_has_traceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Result::clear_has_traceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Result::clear_traceid() {
  if (traceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    traceid_->clear();
  }
  clear_has_traceid();
}
inline const ::std::string& Result::traceid() const {
  // @@protoc_insertion_point(field_get:rdd_pb.Result.traceid)
  return *traceid_;
}
inline void Result::set_traceid(const ::std::string& value) {
  set_has_traceid();
  if (traceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    traceid_ = new ::std::string;
  }
  traceid_->assign(value);
  // @@protoc_insertion_point(field_set:rdd_pb.Result.traceid)
}
inline void Result::set_traceid(const char* value) {
  set_has_traceid();
  if (traceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    traceid_ = new ::std::string;
  }
  traceid_->assign(value);
  // @@protoc_insertion_point(field_set_char:rdd_pb.Result.traceid)
}
inline void Result::set_traceid(const char* value, size_t size) {
  set_has_traceid();
  if (traceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    traceid_ = new ::std::string;
  }
  traceid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rdd_pb.Result.traceid)
}
inline ::std::string* Result::mutable_traceid() {
  set_has_traceid();
  if (traceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    traceid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:rdd_pb.Result.traceid)
  return traceid_;
}
inline ::std::string* Result::release_traceid() {
  clear_has_traceid();
  if (traceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = traceid_;
    traceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Result::set_allocated_traceid(::std::string* traceid) {
  if (traceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete traceid_;
  }
  if (traceid) {
    set_has_traceid();
    traceid_ = traceid;
  } else {
    clear_has_traceid();
    traceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:rdd_pb.Result.traceid)
}

// optional .rdd_pb.ResultCode code = 2;
inline bool Result::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Result::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Result::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Result::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::rdd_pb::ResultCode Result::code() const {
  // @@protoc_insertion_point(field_get:rdd_pb.Result.code)
  return static_cast< ::rdd_pb::ResultCode >(code_);
}
inline void Result::set_code(::rdd_pb::ResultCode value) {
  assert(::rdd_pb::ResultCode_IsValid(value));
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:rdd_pb.Result.code)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rdd_pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::rdd_pb::ResultCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rdd_pb::ResultCode>() {
  return ::rdd_pb::ResultCode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Empty_2eproto__INCLUDED
