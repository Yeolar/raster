
#line 3 "src/thriftl.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

#define YY_FLEX_LEX_COMPAT
extern int yylineno;

int yylineno = 1;

extern char yytext[];

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	if ( yyleng + (yy_more_offset) >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	yy_flex_strncpy( &yytext[(yy_more_offset)], (yytext_ptr), yyleng + 1 ); \
	yyleng += (yy_more_offset); \
	(yy_prev_more_offset) = (yy_more_offset); \
	(yy_more_offset) = 0; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 172
#define YY_END_OF_BUFFER 173
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[1738] =
    {   0,
        1,  165,    1,  165,  173,  170,  171,  172,    1,  170,
      171,  172,    1,  172,  168,  170,  171,  172,    5,  170,
      171,  172,   57,  170,  171,  172,    6,  170,  171,  172,
        7,  170,  171,  172,  165,  170,  171,  172,  165,  167,
      170,  171,  172,  170,  171,  172,  170,  171,  172,  163,
      165,  170,  171,  172,  163,  165,  170,  171,  172,  166,
      167,  170,  171,  172,  166,  167,  170,  171,  172,  166,
      167,  170,  171,  172,  166,  170,  171,  172,  166,  167,
      170,  171,  172,  166,  167,  170,  171,  172,  166,  167,
      170,  171,  172,  166,  167,  170,  171,  172,  166,  167,

      170,  171,  172,  166,  167,  170,  171,  172,  166,  167,
      170,  171,  172,  166,  167,  170,  171,  172,  166,  167,
      170,  171,  172,  166,  167,  170,  171,  172,  166,  167,
      170,  171,  172,  166,  167,  170,  171,  172,  166,  167,
      170,  171,  172,  166,  167,  170,  171,  172,  166,  167,
      170,  171,  172,  166,  167,  170,  171,  172,  166,  167,
      170,  171,  172,  166,  167,  170,  171,  172,  166,  167,
      170,  171,  172,  166,  167,  170,  171,  172,  166,  167,
      170,  171,  172,  166,  167,  170,  171,  172,    1,    5,
      163,  165,  163,  165,  167,  163,  165,  167,  163,  165,

      167,  167,  165,    4,  166,  167,  166,  167,  167,  165,
      166,  167,  166,  167,  166,  166,  166,  167,  166,  167,
      166,  167,  166,  167,   71,  166,  167,  166,  167,  166,
      167,  166,  167,  166,  167,  166,  167,  166,  167,  166,
      167,  166,  167,  166,  167,  166,  167,  166,  167,   85,
      166,  167,  166,  167,  166,  167,  166,  167,  166,  167,
      166,  167,  166,  167,  166,  167,  166,  167,  166,  167,
      166,  167,  166,  167,  166,  167,  166,  167,  166,  167,
      166,  167,  109,  166,  167,  166,  167,  112,  166,  167,
      116,  166,  167,  166,  167,  166,  167,  166,  167,  166,

      167,  166,  167,  166,  167,  166,  167,  166,  167,  166,
      167,  166,  167,  166,  167,  124,  166,  167,  166,  167,
      166,  167,  166,  167,  166,  167,  166,  167,  166,  167,
      166,  167,  166,  167,  166,  167,  166,  167,  166,  167,
      166,  167,  166,  167,  166,  167,  166,  167,  166,  167,
      166,  167,  166,  167,  166,  167,  166,  167,  166,  167,
      166,  167,  166,  167,  166,  167,  166,  167,  166,  167,
      166,  167,  166,  167,  166,  167,  166,  167,  165,  165,
      167,  167,  165,  167,    4,  164,  166,  167,   59,  166,
      167,  166,  166,  166,  166,  166,  166,  166,  167,  166,

      167,   69,  166,  167,  166,  167,  166,  167,  166,  167,
      166,  167,  166,  167,  166,  167,  166,  167,  166,  167,
      166,  167,  166,  167,  166,  167,  166,  167,  166,  167,
      166,  167,  166,  167,  166,  167,  166,  167,   81,  166,
      167,   83,  166,  167,  166,  167,  166,  167,  166,  167,
      166,  167,   91,  166,  167,  166,  167,  166,  167,  166,
      167,  166,  167,  166,  167,  166,  167,  166,  167,  166,
      167,  103,  166,  167,  166,  167,  166,  167,  166,  167,
      166,  167,   33,  166,  167,   34,  166,  167,   35,  166,
      167,  166,  167,  166,  167,  166,  167,  166,  167,  166,

      167,  166,  167,  166,  167,  166,  167,   41,  166,  167,
      166,  167,  166,  167,  166,  167,  120,  166,  167,  166,
      167,  122,  166,  167,  123,  166,  167,  166,  167,  166,
      167,  166,  167,  166,  167,  166,  167,  166,  167,  166,
      167,  166,  167,  166,  167,  166,  167,  166,  167,  166,
      167,  166,  167,  166,  167,  166,  167,  166,  167,  166,
      167,  166,  167,  166,  167,  166,  167,   43,  166,  167,
      166,  167,  166,  167,  166,  167,  166,  167,  166,  167,
      166,  167,  166,  167,  166,  167,  166,  167,  166,  167,
      166,  167,  166,  167,  166,  167,  148,  166,  167,  166,

      167,  166,  167,  166,  167,  166,  167,  166,  167,  166,
      167,  154,  166,  167,  155,  166,  167,  166,  167,  166,
      167,  166,  167,  166,  167,  166,  167,  166,  167,  161,
      166,  167,  166,  167,  166,  167,  164,  167,    2,  166,
      167,  166,  166,  166,  166,  166,  166,  166,  166,  167,
      166,  167,   70,  166,  167,  166,  167,  166,  167,  166,
      167,  166,  167,   31,  166,  167,  166,  167,   32,  166,
      167,   75,  166,  167,  166,  167,  166,  167,  166,  167,
      166,  167,  166,  167,  166,  167,  166,  167,  166,  167,
      166,  167,  166,  167,  166,  167,  166,  167,  166,  167,

      166,  167,   87,  166,  167,   88,  166,  167,  166,  167,
      166,  167,  166,  167,  166,  167,  166,  167,  166,  167,
      166,  167,   52,  166,  167,  166,  167,  100,  166,  167,
      166,  167,  166,  167,  166,  167,  166,  167,  166,  167,
      105,  166,  167,  166,  167,  166,  167,  108,  166,  167,
      166,  167,  166,  167,  166,  167,  166,  167,  166,  167,
      166,  167,  166,  167,  166,  167,   42,  166,  167,  166,
      167,  166,  167,  166,  167,  121,  166,  167,  166,  167,
      166,  167,  166,  167,  126,  166,  167,  166,  167,  166,
      167,  166,  167,  166,  167,  166,  167,  166,  167,  166,

      167,  166,  167,  133,  166,  167,  166,  167,  166,  167,
      166,  167,  166,  167,  166,  167,  166,  167,  138,  166,
      167,  166,  167,  166,  167,  166,  167,  166,  167,  166,
      167,  166,  167,  166,  167,  166,  167,  166,  167,  166,
      167,  166,  167,  144,  166,  167,  145,  166,  167,  166,
      167,  166,  167,    9,  166,  167,  166,  167,  166,  167,
      166,  167,  166,  167,  166,  167,  166,  167,  166,  167,
       30,  166,  167,  166,  167,  158,  166,  167,  166,  167,
      160,  166,  167,  166,  167,  166,  167,    3,    2,  169,
       58,  166,  167,  166,  166,  166,  166,  166,  166,  166,

      166,  167,   68,  166,  167,  166,  167,   56,  166,  167,
       73,  166,  167,  166,  167,   74,  166,  167,   76,  166,
      167,   77,  166,  167,   78,  166,  167,  166,  167,   53,
      166,  167,  166,  167,  166,  167,  166,  167,  166,  167,
      166,  167,  166,  167,  166,  167,  166,  167,  166,  167,
      166,  167,  166,  167,  166,  167,   90,  166,  167,  166,
      167,  166,  167,   95,  166,  167,  166,  167,  166,  167,
      166,  167,  166,  167,  166,  167,    8,  166,  167,  166,
      167,  102,  166,  167,  166,  167,  166,  167,  166,  167,
      166,  167,  166,  167,  166,  167,  166,  167,  166,  167,

      166,  167,  166,  167,  166,  167,  166,  167,  166,  167,
      166,  167,  166,  167,  166,  167,  166,  167,  166,  167,
      166,  167,  128,  166,  167,  166,  167,  166,  167,  166,
      167,  166,  167,  132,  166,  167,  166,  167,  166,  167,
      166,  167,  135,  166,  167,  166,  167,  166,  167,   40,
      166,  167,  166,  167,  166,  167,   39,  166,  167,  166,
      167,  166,  167,  166,  167,  166,  167,  141,  166,  167,
      166,  167,  166,  167,  146,  166,  167,  166,  167,  166,
      167,  149,  166,  167,   47,  150,  166,  167,  166,  167,
      166,  167,  153,  166,  167,  166,  167,  166,  167,  159,

      166,  167,  166,  167,  166,  167,  166,  167,  162,  166,
      167,    3,  169,    2,  169,  166,  166,  166,  166,  166,
      166,  166,  166,  167,   72,  166,  167,   38,  166,  167,
      166,  167,  166,  167,  166,  167,  166,  167,  166,  167,
      166,  167,  166,  167,  166,  167,   84,  166,  167,  166,
      167,   36,  166,  167,  166,  167,   89,  166,  167,  166,
      167,   93,  166,  167,  166,  167,  166,  167,   98,  166,
      167,   99,  166,  167,  166,  167,  166,  167,  166,  167,
      166,  167,  107,  166,  167,  166,  167,  111,  166,  167,
      166,  167,  113,  166,  167,  166,  167,  166,  167,  166,

      167,  117,  166,  167,  118,  166,  167,  166,  167,  119,
      166,  167,   44,  166,  167,  166,  167,  166,  167,  166,
      167,  166,  167,  166,  167,  166,  167,  127,  131,  166,
      167,  166,  167,  166,  167,  166,  167,  134,  166,  167,
      137,  166,  167,  166,  167,  166,  167,  139,  166,  167,
      166,  167,  140,  166,  167,   37,  166,  167,   46,  166,
      167,  142,  166,  167,  166,  167,   50,  166,  167,  166,
      167,  166,  167,  151,  166,  167,  166,  167,  166,  167,
      166,  167,  166,  167,  166,  167,  166,  167,  166,  167,
      166,  167,  169,  166,   61,  166,  166,  166,  166,  166,

      166,  166,  167,  166,  167,  166,  167,  166,  167,  166,
      167,  166,  167,  166,  167,   80,  166,  167,   82,  166,
      167,  166,  167,   86,  166,  167,  166,  167,  166,  167,
      166,  167,  166,  167,  166,  167,   49,  166,  167,  101,
      166,  167,  104,  166,  167,  166,  167,  166,  167,   29,
      166,  167,  166,  167,  166,  167,  166,  167,  166,  167,
      166,  167,  125,  166,  167,  166,  167,  166,  167,  129,
      166,  167,  166,  167,  166,  167,  166,  167,  166,  167,
      166,  167,   51,  166,  167,  166,  167,  166,  167,  166,
      167,   45,  166,  167,  166,  167,  156,  166,  167,  166,

      167,   24,  166,  167,  166,  167,  166,  167,  166,  167,
      166,  167,  166,   62,  166,  166,   64,  166,  166,  166,
       67,  166,  167,  166,  167,   79,  166,  167,  166,  167,
      166,  167,   13,  166,  167,  166,  167,  166,  167,  166,
      167,  166,  167,  166,  167,   97,  166,  167,  166,  167,
      106,  166,  167,  166,  167,  166,  167,  166,  167,  166,
      167,  166,  167,   55,  166,  167,  166,  167,  166,  167,
      166,  167,  166,  167,  136,  166,  167,   54,  166,  167,
      166,  167,  166,  167,  166,  167,  166,  167,  152,  166,
      167,  157,  166,  167,  166,  167,  166,  167,  166,  167,

      166,  167,   60,  166,  166,  166,  166,  166,  167,  166,
      167,  166,  167,  166,  167,  166,  167,  166,  167,  166,
      167,   96,  166,  167,   48,  166,  167,  166,  167,  166,
      167,  115,  166,  167,  166,  167,   10,  166,  167,  166,
      167,  166,  167,  130,  166,  167,   19,  166,  167,  166,
      167,  166,  167,  166,  167,  147,  166,  167,   28,  166,
      167,  166,  167,  166,  167,  166,  167,  166,   65,  166,
      166,  166,  167,  166,  167,  166,  167,  166,  167,  166,
      167,   92,  166,  167,   94,  166,  167,  110,  166,  167,
      114,  166,  167,  166,  167,  166,  167,  166,  167,  166,

      167,  166,  167,  166,  167,  166,  167,  166,  167,  166,
      167,  166,  166,  166,  167,   12,  166,  167,  166,  167,
      166,  167,  166,  167,  166,  167,  166,  167,  166,  167,
      166,  167,  166,  167,  166,  167,  166,  167,  166,  167,
      166,  167,  166,  167,   63,  166,  166,   15,  166,  167,
      166,  167,  166,  167,  166,  167,   14,  166,  167,   20,
      166,  167,  166,  167,  166,  167,  166,  167,  166,  167,
      143,  166,  167,  166,  167,   26,  166,  167,   25,  166,
      167,   66,  166,   11,  166,  167,  166,  167,  166,  167,
       18,  166,  167,  166,  167,  166,  167,  166,  167,   27,

      166,  167,  166,  167,  166,  167,   21,  166,  167,  166,
      167,  166,  167,  166,  167,  166,  167,  166,  167,  166,
      167,   16,  166,  167,   17,  166,  167,  166,  167,   23,
      166,  167,  166,  167,   22,  166,  167
    } ;

static yyconst flex_int16_t yy_accept[802] =
    {   0,
        1,    3,    5,    6,    9,   13,   15,   19,   23,   27,
       31,   35,   39,   44,   47,   50,   55,   60,   65,   70,
       75,   79,   84,   89,   94,   99,  104,  109,  114,  119,
      124,  129,  134,  139,  144,  149,  154,  159,  164,  169,
      174,  179,  184,  189,  190,  191,  191,  193,  195,  195,
      196,  196,  199,  202,  203,  204,  204,  205,  205,  205,
      207,  209,  209,  210,  213,  215,  215,  216,  217,  219,
      221,  223,  225,  228,  230,  232,  234,  236,  238,  240,
      242,  244,  246,  248,  250,  253,  255,  257,  259,  261,
      263,  265,  267,  269,  271,  273,  275,  277,  279,  281,

      283,  286,  288,  291,  294,  296,  298,  300,  302,  304,
      306,  308,  310,  312,  314,  316,  319,  321,  323,  325,
      327,  329,  331,  333,  335,  337,  339,  341,  343,  345,
      347,  349,  351,  353,  355,  357,  359,  361,  363,  365,
      367,  369,  371,  373,  375,  377,  379,  380,  380,  382,
      383,  385,  385,  385,  386,  387,  389,  392,  393,  394,
      395,  396,  397,  398,  400,  402,  405,  407,  409,  411,
      413,  415,  417,  419,  421,  423,  425,  427,  429,  431,
      433,  435,  437,  439,  442,  445,  447,  449,  451,  453,
      456,  458,  460,  462,  464,  466,  468,  470,  472,  475,

      477,  479,  481,  483,  486,  489,  492,  494,  496,  498,
      500,  502,  504,  506,  508,  511,  513,  515,  517,  520,
      522,  525,  528,  530,  532,  534,  536,  538,  540,  542,
      544,  546,  548,  550,  552,  554,  556,  558,  560,  562,
      564,  566,  568,  571,  573,  575,  577,  579,  581,  583,
      585,  587,  589,  591,  593,  595,  597,  600,  602,  604,
      606,  608,  610,  612,  615,  618,  620,  622,  624,  626,
      628,  630,  633,  635,  637,  639,  639,  639,  639,  639,
      639,  640,  642,  643,  644,  645,  646,  647,  648,  649,
      651,  653,  656,  658,  660,  662,  664,  667,  669,  672,

      675,  677,  679,  681,  683,  685,  687,  689,  691,  693,
      695,  697,  699,  701,  703,  706,  709,  711,  713,  715,
      717,  719,  721,  723,  726,  728,  731,  733,  735,  737,
      739,  741,  744,  746,  748,  751,  753,  755,  757,  759,
      761,  763,  765,  767,  770,  772,  774,  776,  779,  781,
      783,  785,  788,  790,  792,  794,  796,  798,  800,  802,
      804,  807,  809,  811,  813,  815,  817,  819,  822,  824,
      826,  828,  830,  832,  834,  836,  838,  840,  842,  844,
      847,  850,  852,  854,  857,  859,  861,  863,  865,  867,
      869,  871,  874,  876,  879,  881,  884,  886,  888,  888,

      888,  889,  889,  889,  889,  889,  891,  894,  895,  896,
      897,  898,  899,  900,  901,  903,  906,  908,  911,  914,
      916,  919,  922,  925,  928,  930,  933,  935,  937,  939,
      941,  943,  945,  947,  949,  951,  953,  955,  957,  960,
      962,  964,  967,  969,  971,  973,  975,  977,  980,  982,
      985,  987,  989,  991,  993,  995,  997,  999, 1001, 1003,
     1005, 1007, 1009, 1011, 1013, 1015, 1017, 1019, 1021, 1023,
     1026, 1028, 1030, 1032, 1034, 1037, 1039, 1041, 1043, 1046,
     1048, 1050, 1053, 1055, 1057, 1060, 1062, 1064, 1066, 1068,
     1071, 1073, 1075, 1078, 1080, 1082, 1085, 1089, 1091, 1093,

     1096, 1098, 1100, 1103, 1105, 1107, 1109, 1112, 1112, 1113,
     1113, 1114, 1114, 1116, 1117, 1118, 1119, 1120, 1121, 1122,
     1123, 1125, 1128, 1131, 1133, 1135, 1137, 1139, 1141, 1143,
     1145, 1147, 1150, 1152, 1155, 1157, 1160, 1162, 1165, 1167,
     1169, 1172, 1175, 1177, 1179, 1181, 1183, 1186, 1188, 1191,
     1193, 1196, 1198, 1200, 1202, 1205, 1208, 1210, 1213, 1216,
     1218, 1220, 1222, 1224, 1226, 1228, 1232, 1234, 1236, 1238,
     1241, 1244, 1246, 1248, 1251, 1253, 1256, 1259, 1262, 1265,
     1267, 1270, 1272, 1274, 1277, 1279, 1281, 1283, 1285, 1287,
     1289, 1291, 1293, 1294, 1295, 1297, 1298, 1299, 1300, 1301,

     1302, 1304, 1306, 1308, 1310, 1312, 1314, 1316, 1319, 1322,
     1324, 1327, 1329, 1331, 1333, 1335, 1337, 1340, 1343, 1346,
     1348, 1350, 1353, 1355, 1357, 1359, 1361, 1363, 1366, 1368,
     1370, 1373, 1375, 1377, 1379, 1381, 1383, 1386, 1388, 1390,
     1392, 1395, 1397, 1400, 1402, 1405, 1407, 1409, 1411, 1413,
     1414, 1416, 1417, 1419, 1420, 1421, 1424, 1426, 1429, 1431,
     1433, 1436, 1438, 1440, 1442, 1444, 1446, 1449, 1451, 1454,
     1456, 1458, 1460, 1462, 1464, 1467, 1469, 1471, 1473, 1475,
     1478, 1481, 1483, 1485, 1487, 1489, 1492, 1495, 1497, 1499,
     1501, 1503, 1505, 1506, 1507, 1508, 1510, 1512, 1514, 1516,

     1518, 1520, 1522, 1525, 1528, 1530, 1532, 1535, 1537, 1540,
     1542, 1544, 1547, 1550, 1552, 1554, 1556, 1559, 1562, 1564,
     1566, 1568, 1569, 1571, 1572, 1574, 1576, 1578, 1580, 1582,
     1585, 1588, 1591, 1594, 1596, 1598, 1600, 1602, 1604, 1606,
     1608, 1610, 1612, 1613, 1614, 1616, 1619, 1621, 1623, 1625,
     1627, 1629, 1631, 1633, 1635, 1637, 1639, 1641, 1643, 1645,
     1647, 1648, 1651, 1653, 1655, 1657, 1660, 1663, 1665, 1667,
     1669, 1671, 1674, 1676, 1679, 1682, 1684, 1687, 1689, 1691,
     1694, 1696, 1698, 1700, 1703, 1705, 1707, 1710, 1712, 1714,
     1716, 1718, 1720, 1722, 1725, 1728, 1730, 1733, 1735, 1738,

     1738
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    1,    1,    6,    4,    7,
        7,    8,    9,    7,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   18,   18,   18,    7,    7,    7,
        7,    7,    1,    1,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   29,   30,   31,   32,   33,   34,
       29,   35,   36,   37,   38,   29,   29,   29,   29,   29,
        7,    1,    7,    1,   39,    1,   40,   41,   42,   43,

       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,    7,    1,    7,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[66] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    3,
        4,    1,    5,    5,    5,    5,    5,    5,    5,    6,
        6,    6,    6,    5,    6,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    6,
        6,    6,    6,    5,    6,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7
    } ;

static yyconst flex_int16_t yy_base[813] =
    {   0,
        0,    0,  963, 2646,   64,   66, 2646,    0, 2646, 2646,
     2646,   59,   93,   60,   72,   70,  677,   75,   77,  129,
       60,  109,  111,  118,   87,  168,  153,   81,  180,   85,
      160,  187,  195,  201,  204,  206,  259,  218,  226,  252,
       79,  213,  105,  121,    0,  272,    0,  674,  315,  710,
      324,  333,  616,  388,  345,  669,    0,    0,  146,  178,
      192,  280,  357,  263,  294,  632,  559,  356,  298,  267,
      270,  344,  355,  372,  249,  374,  381,  242,  383,  398,
      401,  404,  406,  413,  410,  416,  419,  422,  424,  434,
      426,  436,  429,  438,  440,  446,  450,  452,  463,  477,

      465,  485,  487,  491,  493,  495,  497,  501,  505,  507,
      509,  511,  514,  516,  520,  503,  522,  524,  531,  539,
      526,  558,  541,  564,  547,  573,  533,  566,  581,  585,
      589,  591,  593,  601,  595,  598,  617,  606,  623,  626,
      630,  608,  637,  651,  656,  653,  671,  552,  687,  740,
      696,  122,  214,    0,    0,  663,  659,  244,  181,  219,
      325,   89,   82,  661,  682,  684,  708,  723,  715,  721,
      706,  719,  731,  728,  733,  737,  717,  725,  763,  776,
      713,  778,  780,  782,  784,  786,  789,  791,  793,  795,
      798,  800,  802,  805,  810,  813,  815,  822,  834,  838,

      840,  850,  853,  855,  857,  859,  862,  864,  866,  869,
      873,  878,  882,  875,  884,  886,  888,  890,  892,  894,
      898,  900,  909,  911,  914,  916,  919,  926,  929,  932,
      934,  937,  939,  941,  944,  946,  951,  956,  958,  962,
      965,  967,  969,  973,  976,  988,  990,  992,  994,  998,
     1000, 1008, 1004, 1010, 1013, 1016, 1019, 1021, 1025, 1033,
     1035, 1037, 1040, 1043, 1045, 1048, 1057, 1061, 1063, 1066,
     1071, 1073, 1080, 1082,    0,  531,  553,  570,  476,  582,
      469, 1088,  411,  488,  461,  163,  478,  143,  209, 1084,
     1086, 1092, 1094, 1098, 1100, 1102, 1104, 1111, 1113, 1115,

     1117, 1119, 1121, 1126, 1124, 1128, 1132, 1135, 1138, 1144,
     1146, 1152, 1157, 1159, 1161, 1164, 1171, 1176, 1178, 1183,
     1185, 1187, 1191, 1196, 1199, 1203, 1207, 1211, 1213, 1215,
     1219, 1225, 1227, 1229, 1231, 1233, 1235, 1239, 1241, 1247,
     1251, 1256, 1260, 1262, 1265, 1268, 1270, 1272, 1274, 1278,
     1280, 1286, 1290, 1294, 1296, 1299, 1301, 1308, 1311, 1313,
     1317, 1323, 1325, 1327, 1330, 1332, 1338, 1340, 1343, 1348,
     1350, 1352, 1356, 1358, 1360, 1368, 1364, 1372, 1375, 1380,
     1382, 1387, 1389, 1391, 1398, 1405, 1407, 1409, 1413, 1415,
     1417, 1419, 1421, 1423, 1425, 1427, 1432, 1435,  737,  923,

     2646, 1025, 1207, 1219, 1290, 2646, 1429,  309,  574,   94,
      223,  125,  604,  627, 1441, 1443, 1445, 1447, 1451, 1453,
     1460, 1463, 1465, 1472, 1477, 1479, 1481, 1483, 1485, 1487,
     1489, 1491, 1495, 1497, 1499, 1501, 1504, 1508, 1510, 1512,
     1516, 1518, 1520, 1522, 1527, 1529, 1532, 1539, 1545, 1547,
     1549, 1551, 1553, 1555, 1566, 1568, 1570, 1573, 1575, 1579,
     1582, 1584, 1587, 1591, 1595, 1598, 1602, 1605, 1607, 1613,
     1619, 1621, 1626, 1628, 1630, 1633, 1639, 1635, 1642, 1644,
     1646, 1651, 1656, 1659, 1654, 1662, 1664, 1666, 1670, 1672,
     1675, 1677, 1679, 1683, 1691, 1697, 1699, 1703, 1705, 1707,

     1709, 1714, 1716, 1722, 1728, 1730, 1732,  398,  388, 1305,
     2646,  383,  368,  517,  618,  643,  819,  803,  765,  870,
     1735, 1737, 1740, 1742, 1744, 1746, 1749, 1753, 1755, 1759,
     1761, 1764, 1768, 1772, 1776, 1779, 1781, 1785, 1788, 1795,
     1799, 1801, 1803, 1805, 1811, 1813, 1815, 1820, 1817, 1824,
     1826, 1828, 1831, 1833, 1840, 1842, 1844, 1846, 1849, 1852,
     1855, 1864, 1866, 1868, 1870, 1872, 1875, 1877, 1879, 1883,
     1885, 1887, 1890, 1892, 1896, 1898, 1900, 1903, 1905, 1909,
     1914, 1920, 1922, 1927, 1929, 1931, 1933, 1935, 1937, 1939,
     1941, 1943,  315,  848,  311,  949,  930, 1067,  796, 1052,

     1945, 1948, 1950, 1955, 1959, 1964, 1961, 1966, 1968, 1970,
     1977, 1979, 1987, 1989, 1999, 2001, 2005, 2007, 2010, 2014,
     2018, 2022, 2024, 2027, 2030, 2034, 2036, 2038, 2040, 2042,
     2046, 2048, 2050, 2052, 2054, 2063, 2067, 2069, 2073, 2078,
     2080, 2084, 2088, 2092, 2094, 2096, 2100, 2103, 2107, 1254,
      301, 1319,  272, 1333, 1069, 2111, 2113, 2118, 2122, 2127,
     2124, 2129, 2131, 2135, 2137, 2139, 2141, 2148, 2150, 2152,
     2154, 2156, 2162, 2165, 2167, 2170, 2173, 2178, 2180, 2183,
     2185, 2188, 2192, 2195, 2203, 2205, 2207, 2212, 2215, 2217,
     2223,  265,  901, 1373, 1136, 2219, 2225, 2227, 2229, 2234,

     2236, 2238, 2240, 2242, 2244, 2248, 2250, 2255, 2261, 2264,
     2268, 2273, 2277, 2279, 2281, 2286, 2288, 2290, 2295, 2297,
     2299, 1561,  231,  970, 2301, 2303, 2305, 2311, 2314, 2307,
     2316, 2318, 2320, 2322, 2324, 2329, 2331, 2333, 2343, 2349,
     2346, 2351, 1571, 1684, 2353, 2355, 2361, 2363, 2366, 2368,
     2370, 2373, 2382, 2385, 2388, 2390, 2394, 2396, 2398,  141,
     1689, 2400, 2407, 2409, 2416, 2418, 2420, 2424, 2427, 2431,
     2433, 2436, 2442, 2444, 2446,   71, 2448, 2451, 2455, 2462,
     2464, 2468, 2470, 2472, 2474, 2477, 2482, 2486, 2488, 2490,
     2493, 2495, 2499, 2503, 2507, 2510, 2512, 2514, 2516, 2646,

     2578, 2582, 2585, 2590, 2594, 2601, 2608, 2611, 2617, 2624,
     2631, 2638
    } ;

static yyconst flex_int16_t yy_def[813] =
    {   0,
      800,    1,  800,  800,  800,  800,  800,  801,  800,  800,
      800,  802,  803,  800,  800,  802,   16,  804,  804,  804,
      805,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  800,  801,  800,   16,   16,  800,  803,
      803,  803,   52,  803,  800,  806,  807,  808,  804,  804,
      804,  800,  803,   26,  804,  805,  805,  805,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,

      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  800,  803,   52,  803,
      803,  809,  810,  807,  808,  804,  804,  805,  805,  805,
      805,  805,  805,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,

      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  150,  809,  811,  809,  810,  812,
      800,  804,  805,  805,  805,  805,  805,  805,  805,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,

      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  809,  809,

      800,  809,  812,  810,  810,  800,  804,  805,  805,  805,
      805,  805,  805,  805,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,

      804,  804,  804,  804,  804,  804,  804,  800,  800,  810,
      800,  800,  800,  805,  805,  805,  805,  805,  805,  805,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  800,  805,  805,  805,  805,  805,  805,  805,

      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  805,
      805,  805,  805,  805,  805,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  805,  805,  805,  805,  804,  804,  804,  804,  804,

      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  805,  805,  805,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  805,  805,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  805,
      805,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  805,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,    0,

      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800
    } ;

static yyconst flex_int16_t yy_nxt[2712] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   17,   17,   17,   17,   17,   18,
       19,   18,   18,   20,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   21,   22,
       23,   24,   25,   26,   27,   28,   18,   29,   30,   18,
       31,   32,   33,   34,   35,   18,   36,   37,   38,   39,
       40,   41,   42,   43,   18,   44,   44,   44,   44,   46,
       66,   47,   55,   55,   55,   55,   55,   55,   55,   56,
       46,   66,   49,   57,   50,   59,   50,   59,   50,   59,
       50,   59,   66,   49,   50,   59,   50,   59,   68,   66,

       61,  289,   49,   51,   66,   52,   53,   53,   53,   53,
       53,   53,  288,   49,   50,   59,   54,  516,   50,   59,
       50,   59,   44,   44,  105,  142,  143,   50,   59,  277,
       84,   96,   58,  278,   97,   66,   54,   62,   63,   59,
       85,   64,   64,   64,   64,   64,   64,   64,  518,   69,
       86,   66,  146,   66,   74,   50,  800,   79,   75,   70,
       65,   71,   50,   59,   76,   72,   73,   77,   80,   50,
       59,   81,   82,   66,   78,   83,   62,   63,   59,  413,
       64,   64,   64,   64,   64,   64,   64,   50,   59,   50,
       59,   66,   90,   98,  411,   99,   50,   59,  100,  106,

       91,   50,   59,   92,   50,   59,   93,  107,  284,   94,
       50,   59,   95,   50,   59,   50,   59,  156,   87,   66,
       88,  280,   50,   59,  101,  281,  108,   50,   59,   66,
       89,  102,  103,   66,  110,   50,   59,  104,  111,  414,
      109,   66,  112,  117,  517,  123,  285,  118,  113,  124,
      119,   50,   59,  114,   66,  115,  286,  116,   50,   59,
      120,   50,   59,  121,  134,  125,  144,  122,   50,   59,
      145,  800,   50,  283,  135,   66,   50,   59,  137,   50,
       59,  136,   66,  138,   55,   55,   55,   55,   55,   55,
       55,  139,  147,  147,  147,  147,  147,  147,  147,  140,

      174,  171,  126,   50,   59,  141,  127,   50,   59,  128,
      129,   66,  166,   60,  165,   60,  157,  130,  131,   66,
      132,   66,  133,   62,   62,   60,  404,  147,  147,  147,
      147,  147,  147,  147,  800,   66,  149,  149,  149,  149,
      149,  149,  149,   51,  514,   53,   53,   53,   53,   53,
       53,   53,  287,   50,   59,  164,   54,   55,   55,   55,
       55,   55,   55,   55,   50,   59,   66,  148,   49,  151,
      151,  151,  151,  151,  151,  151,   54,  158,  159,  404,
      160,   50,   59,   50,   59,  161,  162,  163,   49,  167,
       50,   59,   50,   59,  404,  150,   62,   63,  148,  399,

      151,  151,  151,  151,  151,  151,  151,   50,   59,  399,
       50,   59,  168,   50,   59,   50,   59,  170,  169,   50,
       59,   66,   50,   59,  173,   50,   59,  172,   50,   59,
      408,   50,   59,   50,   59,   50,   59,  177,   50,   59,
      175,  176,  179,   50,   59,   50,   59,   50,   59,   50,
       59,  178,  182,  180,  183,   50,   59,  184,  181,   50,
       59,   50,   59,  185,  190,  193,  188,  194,  187,  186,
      204,   66,   50,   59,   50,   59,  189,  205,  197,  191,
      404,  192,  195,  403,  196,  199,   50,   59,   66,  198,
      410,  200,  201,  206,   50,   59,   50,   59,   66,  202,

       50,   59,   50,   59,   50,   59,   50,   59,  203,  412,
       50,   59,   50,   59,   50,   59,   50,   59,   50,   59,
       50,   59,  409,   50,   59,   50,   59,   66,  208,   50,
       59,   50,   59,   50,   59,   50,   59,  209,  277,  207,
       50,   59,   50,   59,  210,  211,  213,  216,   50,   59,
       50,   59,  594,  212,  214,  215,   50,   59,  217,  223,
      400,  221,  800,  225,  401,  218,  231,   50,   59,   66,
      219,  220,  222,   50,   59,   50,   59,  277,  224,  226,
      227,  402,   50,   59,   66,  228,  229,  239,  233,  405,
       50,   59,  230,  406,   50,   59,  232,  244,   50,   59,

       50,   59,   50,   59,   50,   59,  234,   50,   59,  235,
       50,   59,  515,  245,   66,   50,   59,   50,   59,  236,
      246,  237,  238,  240,  247,  241,   50,   59,   66,  242,
      519,  243,   50,   59,  255,   50,   59,   66,  250,   50,
       59,  248,  800,  249,  252,  251,   50,   59,  253,  264,
      520,  269,  258,   66,  256,  270,  595,  254,  257,  259,
       50,   59,   50,   59,  260,   50,   59,  261,   50,   59,
       50,   59,   50,   59,  262,  263,  153,  267,   50,  265,
      268,  596,  266,  147,  147,  147,  147,  147,  147,  147,
      282,   50,   59,   50,   59,  271,  274,  148,  273,  149,

      149,  149,  149,  149,  149,  149,  148,  272,  151,  151,
      151,  151,  151,  151,  151,   50,   59,   50,   59,  290,
      148,  291,   50,   59,   50,   59,   50,   59,   50,   59,
       50,   59,   50,   59,   50,   59,  800,   50,   59,  800,
       50,   59,   50,   59,  277,  296,   50,   59,  508,   50,
      148,  307,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  292,  293,  294,  295,  297,
      298,  299,   50,   59,  302,   66,  300,  303,  301,  275,
      275,  275,  275,  275,  275,   50,   59,   50,   59,   50,
       59,   50,   59,   50,   59,   50,   59,  599,   50,   59,

       50,   59,   50,   59,   50,   59,   66,   50,   59,   50,
       59,   50,   59,   66,   50,   59,  304,  308,  654,   50,
       59,  310,   50,   59,   50,   59,  313,  311,  314,   66,
      309,   50,   59,  305,  306,  315,  316,  318,  312,  319,
      317,  598,  320,   50,   59,  325,  326,   50,   59,   50,
       59,  324,  321,  327,  329,  597,  322,  323,   66,   50,
       59,  330,   50,   59,   50,   59,   50,   59,   50,   59,
      328,   50,   59,   50,   59,   50,   59,  331,   50,   59,
       66,  333,   50,   59,   50,   59,  650,   50,   59,  332,
      334,   50,   59,   50,   59,   50,   59,   50,   59,   50,

       59,   50,   59,   50,   59,  600,  335,   50,   59,   50,
       59,   66,  336,  339,  338,  337,  341,  342,   50,   59,
       50,   59,  343,   50,   59,   50,   59,  340,   50,   59,
      277,  346,  722,  344,  509,   50,   59,  347,   50,   59,
       66,   50,   59,   50,   59,  345,   50,   59,   50,   59,
       50,   59,  348,   50,   59,   50,   59,  652,  350,   66,
       50,   59,  800,  351,  354,   50,   59,   50,   59,  353,
      349,   50,   59,  352,   50,   59,   50,   59,   50,   59,
       66,  355,   50,   59,  358,   50,   59,  651,  359,  356,
      357,  362,  364,  744,  361,  800,  360,   50,   59,   50,

       59,   50,   59,   50,   59,  363,  368,   50,   59,   50,
       59,  800,  365,   50,   59,  366,  371,   50,   59,   50,
       59,  367,   50,   59,  369,   50,   59,  370,   50,   59,
       50,   59,  277,  372,   50,   59,  402,  377,  373,  375,
      800,  379,   50,   59,   50,   59,   50,   59,  374,   50,
       59,  376,   50,   59,   50,   59,  378,   50,   59,  384,
      380,  381,   66,  382,  385,  383,   50,   59,  386,  800,
       50,   59,   50,   59,  800,   50,   59,   66,  388,   66,
       50,   59,   50,   59,  389,  655,  387,  390,  695,   50,
       59,   50,   59,   50,   59,   50,   59,   50,   59,  392,

      393,   50,   59,   50,   59,  653,  391,   50,   59,   50,
       59,   50,   59,   50,   59,  394,  395,  396,  397,  407,
       50,   59,   50,   59,   50,   59,   50,   59,   50,   59,
       50,   59,  398,   50,   59,   50,   59,   50,   59,  418,
      415,   50,   59,  416,   50,   59,   66,   50,   59,  800,
      417,  800,  419,   50,   59,   50,   59,  724,  420,  800,
      421,   50,   59,  422,  424,  425,   50,   59,   50,   59,
       50,   59,  800,   50,   59,  427,  423,  432,  800,  428,
       50,   59,  426,  800,  429,   50,   59,   50,   59,  800,
      430,  431,   50,   59,   50,   59,   50,   59,  435,  800,

       50,   59,  800,  433,  434,   50,   59,  436,   50,   59,
      437,  438,   50,   59,  510,  439,   50,   59,  511,  440,
       50,   59,   50,   59,   50,   59,  403,  442,   50,   59,
      512,  441,  800,  444,   50,   59,   50,   59,   50,   59,
       50,   59,   50,   59,   50,   59,  443,  445,   50,   59,
       50,   59,  800,  446,  448,  800,   50,   59,  451,  447,
       50,   59,  800,  449,   66,   50,   59,  800,  453,   50,
       59,   50,   59,  450,   50,   59,  454,   50,   59,   50,
       59,   50,   59,   50,   59,  452,  458,   50,   59,   50,
       59,  455,  692,  457,  460,   50,   59,  280,  456,   50,

       59,  513,  461,   50,   59,   50,   59,  459,   50,   59,
       50,   59,  403,  465,  800,  462,  593,   50,   59,  467,
       50,   59,   50,   59,  800,  463,   50,   59,  468,   66,
      464,  466,   50,   59,   50,   59,   50,   59,  471,   50,
       59,   50,   59,   66,  472,  800,  469,   50,   59,   50,
       59,  693,   50,   59,  470,  473,  475,   50,   59,   50,
       59,   50,   59,  800,  474,   50,   59,   50,   59,   50,
       59,  694,  477,   50,   59,  800,  481,   50,   59,  800,
      476,   50,   59,   66,   50,   59,  478,  800,  480,   50,
       59,   50,   59,  479,  482,  483,   50,   59,   50,   59,

       50,   59,  800,  484,  800,  487,  486,   50,   59,  489,
      485,  723,  488,  491,   50,   59,   50,   59,   50,   59,
      490,  492,   50,   59,   50,   59,   50,   59,   50,   59,
       50,   59,   50,   59,   50,   59,   50,   59,   50,   59,
      495,   50,   59,  800,   50,   59,  494,  800,  493,  496,
       50,   59,   50,   59,   50,   59,   50,   59,  499,  497,
       50,   59,   50,   59,  800,  500,  498,  800,  503,   50,
       59,  504,   50,   59,   50,   59,  501,  507,  800,  502,
      521,   50,   59,  800,  505,  506,   50,   59,   50,   59,
       50,   59,   50,   59,   50,   59,   50,   59,   50,   59,

       50,   59,  800,  522,   50,   59,   50,   59,   50,   59,
       50,   59,  800,   50,   59,  524,  523,   50,   59,   50,
       59,   50,   59,  800,  527,   50,   59,   50,   59,   50,
       59,   50,   59,  525,  800,  526,   50,   59,   50,   59,
      532,   50,   59,  529,  534,  531,  533,  530,   50,   59,
      528,  535,  536,  537,   50,   59,   50,   59,   50,   59,
       50,   59,   50,   59,   50,   59,  800,  539,  800,  540,
      541,   66,  538,  800,  543,   50,   59,   50,   59,   50,
       59,   66,   50,   59,   50,   59,  800,  542,   50,   59,
      545,   50,   59,   50,   59,  544,   50,   59,  546,  743,

       50,   59,  800,  547,   50,   59,  548,   50,   59,  760,
      550,   50,   59,  551,   50,   59,   50,   59,  800,  553,
      800,  555,   50,   59,  549,  552,  800,  556,   50,   59,
       50,   59,  800,  554,  558,   50,   59,   50,   59,   50,
       59,  557,   50,   59,   50,   59,  563,  561,   50,   59,
      560,   50,   59,   50,   59,   50,   59,  800,  559,  562,
       50,   59,  565,   50,   59,   50,   59,  566,   50,   59,
      567,   50,   59,   50,   59,   50,   59,  564,  570,   50,
       59,   50,   59,  800,   50,   59,   50,   59,   50,   59,
      800,  568,   50,   59,   66,  569,  571,  573,  572,   66,

       50,   59,  800,  574,  800,  576,   50,   59,   50,   59,
      800,  577,   50,   59,   50,   59,   50,   59,   50,   59,
      575,  579,  761,   50,   59,   50,   59,  776,  578,  800,
      582,   50,   59,  580,  583,  800,  581,   50,   59,   50,
       59,   50,   59,  800,   50,   59,   50,   59,  586,   50,
       59,   50,   59,   50,   59,   50,   59,  585,   50,   59,
      584,  587,   50,   59,   50,   59,  800,  590,   50,   59,
       50,   59,  588,   50,   59,  591,  601,   50,   59,  800,
      589,   50,   59,  800,  592,   50,   59,  604,   50,   59,
       50,   59,  800,  607,   50,   59,  602,   50,   59,  800,

      605,  800,  608,  603,   50,   59,  610,  606,   50,   59,
       50,   59,   50,   59,   50,   59,  800,  611,  800,  609,
       50,   59,   50,   59,   50,   59,   50,   59,  613,   50,
       59,  612,  800,   50,   59,   50,   59,   50,   59,  800,
       50,   59,   50,   59,  800,  615,  614,  800,  616,   50,
       59,   50,   59,   50,   59,   50,   59,  619,   50,   59,
      617,   50,   59,  621,   50,   59,  620,  622,  618,  623,
      624,  800,  625,   50,   59,   50,   59,   50,   59,   50,
       59,   50,   59,  626,   50,   59,   50,   59,   50,   59,
      800,  627,   50,   59,   50,   59,   50,   59,  628,   50,

       59,   50,   59,  629,  800,   50,   59,   50,   59,   50,
       59,  631,   50,   59,   50,   59,  800,  630,   50,   59,
      634,  800,  635,   50,   59,  800,  636,  800,  632,   50,
       59,   50,   59,  637,  633,  638,   50,   59,   50,   59,
       50,   59,   50,   59,   50,   59,   50,   59,   50,   59,
       50,   59,   50,   59,   50,   59,  800,   50,   59,   50,
       59,  800,  639,  640,   50,   59,  641,  800,   50,   59,
       50,   59,  642,   50,   59,   50,   59,   50,   59,   50,
       59,  643,  800,  644,  800,  645,   50,   59,   50,   59,
      647,  648,  800,  658,  800,  646,   50,   59,   50,   59,

      800,  649,  660,  656,  657,  659,  800,  661,   50,   59,
       50,   59,  800,  662,   50,   59,   50,   59,  664,   50,
       59,  800,  663,   50,   59,  800,  665,   50,   59,  800,
      666,   50,   59,   50,   59,  800,   50,   59,  800,   50,
       59,  800,  667,   50,   59,   50,   59,   50,   59,   50,
       59,   50,   59,  800,  668,   50,   59,   50,   59,   50,
       59,   50,   59,   50,   59,  800,  669,  671,  672,  800,
      670,  673,   50,   59,  800,  674,   50,   59,   50,   59,
      800,  676,   50,   59,  800,  677,  675,   50,   59,   50,
       59,  678,  800,   50,   59,  800,  681,   50,   59,  800,

      679,   50,   59,   50,   59,   50,   59,  800,  680,   50,
       59,  800,   50,   59,  682,  800,   50,   59,  800,  683,
       50,   59,   50,   59,  800,  684,  686,   50,   59,  800,
      685,   50,   59,   50,   59,  687,   50,   59,   50,   59,
       50,   59,  800,  689,   50,   59,   50,   59,   50,   59,
       50,   59,  688,  690,  691,  800,  696,   50,   59,   50,
       59,   50,   59,   50,   59,   50,   59,  800,  699,  800,
      700,   50,   59,  800,   50,   59,   50,   59,  702,   50,
       59,  697,   50,   59,  698,  703,  800,   50,   59,   50,
       59,  701,   50,   59,   50,   59,  800,   50,   59,  707,

      704,   50,   59,  800,   50,   59,  800,  706,  709,  800,
      705,  708,   50,   59,   50,   59,   50,   59,  800,  710,
      712,   50,   59,  713,   50,   59,   50,   59,   50,   59,
      711,  714,   50,   59,   50,   59,   50,   59,   50,   59,
      800,  715,  716,   50,   59,   50,   59,   50,   59,   50,
       59,   50,   59,   50,   59,  800,  720,   50,   59,   50,
       59,  717,  800,  725,   50,   59,  800,  726,  800,  718,
       50,   59,  719,   50,   59,  800,  721,   50,   59,  730,
      728,  727,   50,   59,  731,  729,   50,   59,   50,   59,
       50,   59,  733,  800,  734,   50,   59,   50,   59,   50,

       59,  732,  800,  735,   50,   59,   50,   59,   50,   59,
       50,   59,   50,   59,   50,   59,   50,   59,  800,  738,
       50,   59,  736,   50,   59,   50,   59,   50,   59,   50,
       59,   50,   59,   50,   59,  800,  737,  741,   50,   59,
       50,   59,   50,   59,  747,  800,  746,  800,  745,  740,
      739,  742,   50,   59,  748,   50,   59,  749,   50,   59,
       50,   59,   50,   59,   50,   59,  800,  750,  752,  751,
       50,   59,   50,   59,  754,   50,   59,   50,   59,   50,
       59,  800,   50,   59,  800,  753,  756,  755,  757,  800,
      759,   50,   59,  800,   50,   59,  758,   50,   59,   50,

       59,  800,  763,   50,   59,   50,   59,   50,   59,   50,
       59,  766,  800,  767,  768,  762,   50,   59,   50,   59,
      764,  769,  800,  765,  770,   50,   59,   50,   59,   50,
       59,  800,  772,   50,   59,  773,   50,   59,  800,  774,
       50,   59,   50,   59,  771,   50,   59,  800,  775,  800,
      777,   50,   59,   50,   59,   50,   59,   50,   59,  800,
       50,   59,  800,  778,   50,   59,  800,  780,  781,  800,
      779,   50,   59,   50,   59,  800,  783,   50,   59,   50,
       59,   50,   59,   50,   59,  784,   50,   59,  800,  782,
      785,   50,   59,  800,  786,   50,   59,   50,   59,   50,

       59,  800,   50,   59,   50,   59,  800,  787,   50,   59,
      800,  788,   50,   59,  789,  790,   50,   59,  791,   50,
       59,   50,   59,   50,   59,   50,   59,  800,  800,  800,
      800,  792,  800,  794,  800,  793,  795,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  796,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  797,  800,  800,  800,  800,  798,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  799,   45,  800,
       45,   45,   45,   45,   45,   48,   48,   50,   50,   50,
       50,   50,   60,   60,   60,   60,   60,   67,   67,   67,

       67,  152,  152,  152,  152,  152,  152,  152,  154,  800,
      154,  154,  154,  154,  154,  155,  155,  276,  276,  276,
      276,  276,  276,  276,  279,  279,  279,  279,  279,  279,
      279,  399,  399,  399,  399,  399,  399,  399,  404,  404,
      404,  404,  404,  404,  404,    3,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,

      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800
    } ;

static yyconst flex_int16_t yy_chk[2712] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    5,    5,    6,    6,   12,
       21,   12,   14,   14,   14,   14,   14,   14,   14,   15,
       16,  776,   12,   15,   18,   18,   19,   19,   41,   41,
       28,   28,  163,   16,   30,   30,   25,   25,   21,  162,

       19,  163,   12,   13,  410,   13,   13,   13,   13,   13,
       13,   13,  162,   16,   43,   43,   13,  410,   22,   22,
       23,   23,   44,   44,   30,   41,   41,   24,   24,  152,
       25,   28,   16,  152,   28,  412,   13,   20,   20,   20,
       25,   20,   20,   20,   20,   20,   20,   20,  412,   22,
       25,  760,   43,  288,   23,   59,   59,   24,   23,   22,
       20,   22,   27,   27,   23,   22,   22,   23,   24,   31,
       31,   24,   24,  286,   23,   24,   26,   26,   26,  288,
       26,   26,   26,   26,   26,   26,   26,   60,   60,   29,
       29,  159,   27,   29,  286,   29,   32,   32,   29,   31,

       27,   61,   61,   27,   33,   33,   27,   31,  159,   27,
       34,   34,   27,   35,   35,   36,   36,   61,   26,  289,
       26,  153,   42,   42,   29,  153,   32,   38,   38,  160,
       26,   29,   29,  411,   33,   39,   39,   29,   33,  289,
       32,  723,   33,   35,  411,   36,  160,   35,   33,   36,
       35,   78,   78,   34,  158,   34,  160,   34,   75,   75,
       35,   40,   40,   35,   38,   36,   42,   35,   37,   37,
       42,   64,   64,  158,   38,  692,   70,   70,   39,   71,
       71,   38,  653,   39,   46,   46,   46,   46,   46,   46,
       46,   40,   62,   62,   62,   62,   62,   62,   62,   40,

       78,   75,   37,   65,   65,   40,   37,   69,   69,   37,
       37,  651,   71,   64,   70,   64,   65,   37,   37,  408,
       37,  595,   37,   49,   49,   64,  593,   49,   49,   49,
       49,   49,   49,   49,   51,  161,   51,   51,   51,   51,
       51,   51,   51,   52,  408,   52,   52,   52,   52,   52,
       52,   52,  161,   72,   72,   69,   52,   55,   55,   55,
       55,   55,   55,   55,   73,   73,   68,   63,   55,   63,
       63,   63,   63,   63,   63,   63,   52,   68,   68,  513,
       68,   74,   74,   76,   76,   68,   68,   68,   55,   72,
       77,   77,   79,   79,  512,   52,   54,   54,   54,  509,

       54,   54,   54,   54,   54,   54,   54,   80,   80,  508,
       81,   81,   73,   82,   82,   83,   83,   74,   73,   85,
       85,  283,   84,   84,   77,   86,   86,   76,   87,   87,
      283,   88,   88,   89,   89,   91,   91,   80,   93,   93,
       79,   79,   81,   90,   90,   92,   92,   94,   94,   95,
       95,   80,   83,   81,   84,   96,   96,   84,   82,   97,
       97,   98,   98,   84,   88,   89,   87,   89,   86,   85,
       98,  285,   99,   99,  101,  101,   87,   99,   91,   88,
      281,   88,   89,  279,   90,   93,  100,  100,  287,   92,
      285,   94,   95,  100,  102,  102,  103,  103,  284,   96,

      104,  104,  105,  105,  106,  106,  107,  107,   97,  287,
      108,  108,  116,  116,  109,  109,  110,  110,  111,  111,
      112,  112,  284,  113,  113,  114,  114,  514,  103,  115,
      115,  117,  117,  118,  118,  121,  121,  103,  276,  102,
      119,  119,  127,  127,  103,  103,  106,  109,  120,  120,
      123,  123,  514,  105,  107,  108,  125,  125,  110,  114,
      277,  112,  148,  117,  277,  110,  121,  122,  122,   67,
      111,  111,  113,  124,  124,  128,  128,  278,  115,  117,
      118,  278,  126,  126,  409,  119,  120,  125,  123,  280,
      129,  129,  120,  280,  130,  130,  122,  127,  131,  131,

      132,  132,  133,  133,  135,  135,  124,  136,  136,  124,
      134,  134,  409,  128,  413,  138,  138,  142,  142,  124,
      129,  124,  124,  126,  130,  126,  137,  137,  515,  126,
      413,  126,  139,  139,  135,  140,  140,  414,  132,  141,
      141,  130,   66,  131,  134,  133,  143,  143,  134,  138,
      414,  142,  136,  516,  135,  142,  515,  134,  135,  137,
      144,  144,  146,  146,  137,  145,  145,  137,  157,  157,
      164,  164,  156,  156,  137,  137,   56,  141,   53,  139,
      141,  516,  140,  147,  147,  147,  147,  147,  147,  147,
      156,  165,  165,  166,  166,  143,  146,  149,  145,  149,

      149,  149,  149,  149,  149,  149,  151,  144,  151,  151,
      151,  151,  151,  151,  151,  171,  171,  167,  167,  164,
       50,  165,  181,  181,  169,  169,  177,  177,  172,  172,
      170,  170,  168,  168,  178,  178,   48,  174,  174,   17,
      173,  173,  175,  175,  399,  171,  176,  176,  399,  149,
      150,  181,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  167,  168,  169,  170,  172,
      173,  174,  179,  179,  177,  519,  175,  178,  176,  150,
      150,  150,  150,  150,  150,  180,  180,  182,  182,  183,
      183,  184,  184,  185,  185,  186,  186,  519,  187,  187,

      188,  188,  189,  189,  190,  190,  599,  191,  191,  192,
      192,  193,  193,  518,  194,  194,  179,  182,  599,  195,
      195,  184,  196,  196,  197,  197,  186,  185,  187,  517,
      183,  198,  198,  180,  180,  188,  189,  190,  185,  190,
      189,  518,  190,  199,  199,  193,  194,  200,  200,  201,
      201,  192,  190,  195,  197,  517,  190,  191,  594,  202,
      202,  198,  203,  203,  204,  204,  205,  205,  206,  206,
      196,  207,  207,  208,  208,  209,  209,  199,  210,  210,
      520,  201,  211,  211,  214,  214,  594,  212,  212,  200,
      202,  213,  213,  215,  215,  216,  216,  217,  217,  218,

      218,  219,  219,  220,  220,  520,  203,  221,  221,  222,
      222,  693,  207,  209,  208,  207,  211,  212,  223,  223,
      224,  224,  213,  225,  225,  226,  226,  210,  227,  227,
      400,  217,  693,  214,  400,  228,  228,  218,  229,  229,
      597,  230,  230,  231,  231,  216,  232,  232,  233,  233,
      234,  234,  220,  235,  235,  236,  236,  597,  224,  596,
      237,  237,    3,  225,  228,  238,  238,  239,  239,  227,
      223,  240,  240,  226,  241,  241,  242,  242,  243,  243,
      724,  229,  244,  244,  231,  245,  245,  596,  232,  229,
      230,  235,  237,  724,  234,    0,  233,  246,  246,  247,

      247,  248,  248,  249,  249,  236,  240,  250,  250,  251,
      251,    0,  238,  253,  253,  238,  244,  252,  252,  254,
      254,  239,  255,  255,  241,  256,  256,  242,  257,  257,
      258,  258,  402,  245,  259,  259,  402,  249,  246,  248,
        0,  251,  260,  260,  261,  261,  262,  262,  247,  263,
      263,  248,  264,  264,  265,  265,  250,  266,  266,  256,
      252,  253,  600,  254,  258,  255,  267,  267,  259,    0,
      268,  268,  269,  269,    0,  270,  270,  598,  261,  655,
      271,  271,  272,  272,  262,  600,  260,  263,  655,  273,
      273,  274,  274,  290,  290,  291,  291,  282,  282,  267,

      268,  292,  292,  293,  293,  598,  266,  294,  294,  295,
      295,  296,  296,  297,  297,  269,  270,  271,  273,  282,
      298,  298,  299,  299,  300,  300,  301,  301,  302,  302,
      303,  303,  274,  305,  305,  304,  304,  306,  306,  294,
      290,  307,  307,  291,  308,  308,  695,  309,  309,    0,
      293,    0,  295,  310,  310,  311,  311,  695,  296,    0,
      298,  312,  312,  301,  303,  304,  313,  313,  314,  314,
      315,  315,    0,  316,  316,  306,  302,  309,    0,  307,
      317,  317,  305,    0,  307,  318,  318,  319,  319,    0,
      307,  308,  320,  320,  321,  321,  322,  322,  312,    0,

      323,  323,    0,  310,  311,  324,  324,  313,  325,  325,
      314,  316,  326,  326,  403,  317,  327,  327,  403,  318,
      328,  328,  329,  329,  330,  330,  404,  320,  331,  331,
      404,  319,    0,  322,  332,  332,  333,  333,  334,  334,
      335,  335,  336,  336,  337,  337,  321,  323,  338,  338,
      339,  339,    0,  325,  328,    0,  340,  340,  331,  327,
      341,  341,    0,  329,  650,  342,  342,    0,  334,  343,
      343,  344,  344,  330,  345,  345,  336,  346,  346,  347,
      347,  348,  348,  349,  349,  333,  340,  350,  350,  351,
      351,  337,  650,  339,  342,  352,  352,  405,  338,  353,

      353,  405,  343,  354,  354,  355,  355,  341,  356,  356,
      357,  357,  510,  349,    0,  345,  510,  358,  358,  351,
      359,  359,  360,  360,    0,  346,  361,  361,  353,  652,
      347,  350,  362,  362,  363,  363,  364,  364,  356,  365,
      365,  366,  366,  654,  357,    0,  354,  367,  367,  368,
      368,  652,  369,  369,  355,  358,  360,  370,  370,  371,
      371,  372,  372,    0,  359,  373,  373,  374,  374,  375,
      375,  654,  363,  377,  377,    0,  367,  376,  376,    0,
      362,  378,  378,  694,  379,  379,  364,    0,  366,  380,
      380,  381,  381,  365,  369,  370,  382,  382,  383,  383,

      384,  384,    0,  371,    0,  374,  373,  385,  385,  376,
      372,  694,  375,  378,  386,  386,  387,  387,  388,  388,
      377,  379,  389,  389,  390,  390,  391,  391,  392,  392,
      393,  393,  394,  394,  395,  395,  396,  396,  407,  407,
      385,  397,  397,    0,  398,  398,  383,    0,  382,  386,
      415,  415,  416,  416,  417,  417,  418,  418,  389,  387,
      419,  419,  420,  420,    0,  390,  388,    0,  395,  421,
      421,  397,  422,  422,  423,  423,  391,  398,    0,  393,
      415,  424,  424,    0,  397,  397,  425,  425,  426,  426,
      427,  427,  428,  428,  429,  429,  430,  430,  431,  431,

      432,  432,    0,  417,  433,  433,  434,  434,  435,  435,
      436,  436,    0,  437,  437,  425,  420,  438,  438,  439,
      439,  440,  440,    0,  429,  441,  441,  442,  442,  443,
      443,  444,  444,  427,    0,  428,  445,  445,  446,  446,
      434,  447,  447,  431,  436,  433,  435,  432,  448,  448,
      430,  437,  438,  440,  449,  449,  450,  450,  451,  451,
      452,  452,  453,  453,  454,  454,    0,  443,    0,  444,
      445,  722,  441,    0,  447,  455,  455,  456,  456,  457,
      457,  743,  458,  458,  459,  459,    0,  446,  460,  460,
      451,  461,  461,  462,  462,  449,  463,  463,  452,  722,

      464,  464,    0,  453,  465,  465,  454,  466,  466,  743,
      456,  467,  467,  457,  468,  468,  469,  469,    0,  459,
        0,  461,  470,  470,  455,  458,    0,  462,  471,  471,
      472,  472,    0,  460,  464,  473,  473,  474,  474,  475,
      475,  463,  476,  476,  478,  478,  469,  467,  477,  477,
      466,  479,  479,  480,  480,  481,  481,    0,  465,  468,
      482,  482,  472,  485,  485,  483,  483,  473,  484,  484,
      474,  486,  486,  487,  487,  488,  488,  471,  478,  489,
      489,  490,  490,    0,  491,  491,  492,  492,  493,  493,
        0,  476,  494,  494,  744,  477,  480,  483,  481,  761,

      495,  495,    0,  484,    0,  487,  496,  496,  497,  497,
        0,  488,  498,  498,  499,  499,  500,  500,  501,  501,
      486,  491,  744,  502,  502,  503,  503,  761,  489,    0,
      494,  504,  504,  492,  495,    0,  493,  505,  505,  506,
      506,  507,  507,    0,  521,  521,  522,  522,  501,  523,
      523,  524,  524,  525,  525,  526,  526,  499,  527,  527,
      498,  502,  528,  528,  529,  529,    0,  505,  530,  530,
      531,  531,  504,  532,  532,  505,  521,  533,  533,    0,
      504,  534,  534,    0,  506,  535,  535,  526,  536,  536,
      537,  537,    0,  529,  538,  538,  524,  539,  539,    0,

      527,    0,  530,  525,  540,  540,  533,  528,  541,  541,
      542,  542,  543,  543,  544,  544,    0,  535,    0,  531,
      545,  545,  546,  546,  547,  547,  549,  549,  538,  548,
      548,  537,    0,  550,  550,  551,  551,  552,  552,    0,
      553,  553,  554,  554,    0,  540,  539,    0,  542,  555,
      555,  556,  556,  557,  557,  558,  558,  545,  559,  559,
      543,  560,  560,  548,  561,  561,  546,  550,  544,  552,
      553,    0,  554,  562,  562,  563,  563,  564,  564,  565,
      565,  566,  566,  557,  567,  567,  568,  568,  569,  569,
        0,  560,  570,  570,  571,  571,  572,  572,  561,  573,

      573,  574,  574,  562,    0,  575,  575,  576,  576,  577,
      577,  564,  578,  578,  579,  579,    0,  563,  580,  580,
      568,    0,  569,  581,  581,    0,  572,    0,  565,  582,
      582,  583,  583,  573,  567,  575,  584,  584,  585,  585,
      586,  586,  587,  587,  588,  588,  589,  589,  590,  590,
      591,  591,  592,  592,  601,  601,    0,  602,  602,  603,
      603,    0,  580,  582,  604,  604,  583,    0,  605,  605,
      607,  607,  585,  606,  606,  608,  608,  609,  609,  610,
      610,  586,    0,  587,    0,  588,  611,  611,  612,  612,
      590,  591,    0,  603,    0,  589,  613,  613,  614,  614,

        0,  592,  605,  601,  602,  604,    0,  606,  615,  615,
      616,  616,    0,  607,  617,  617,  618,  618,  612,  619,
      619,    0,  610,  620,  620,    0,  613,  621,  621,    0,
      614,  622,  622,  623,  623,    0,  624,  624,    0,  625,
      625,    0,  615,  626,  626,  627,  627,  628,  628,  629,
      629,  630,  630,    0,  616,  631,  631,  632,  632,  633,
      633,  634,  634,  635,  635,    0,  620,  623,  624,    0,
      621,  625,  636,  636,    0,  626,  637,  637,  638,  638,
        0,  629,  639,  639,    0,  630,  627,  640,  640,  641,
      641,  632,    0,  642,  642,    0,  635,  643,  643,    0,

      633,  644,  644,  645,  645,  646,  646,    0,  634,  647,
      647,    0,  648,  648,  636,    0,  649,  649,    0,  638,
      656,  656,  657,  657,    0,  639,  642,  658,  658,    0,
      640,  659,  659,  661,  661,  644,  660,  660,  662,  662,
      663,  663,    0,  647,  664,  664,  665,  665,  666,  666,
      667,  667,  646,  648,  649,    0,  657,  668,  668,  669,
      669,  670,  670,  671,  671,  672,  672,    0,  662,    0,
      663,  673,  673,    0,  674,  674,  675,  675,  665,  676,
      676,  659,  677,  677,  660,  666,    0,  678,  678,  679,
      679,  664,  680,  680,  681,  681,    0,  682,  682,  672,

      668,  683,  683,    0,  684,  684,    0,  671,  674,    0,
      670,  673,  685,  685,  686,  686,  687,  687,    0,  676,
      678,  688,  688,  679,  689,  689,  690,  690,  696,  696,
      677,  682,  691,  691,  697,  697,  698,  698,  699,  699,
        0,  683,  684,  700,  700,  701,  701,  702,  702,  703,
      703,  704,  704,  705,  705,    0,  690,  706,  706,  707,
      707,  685,    0,  696,  708,  708,    0,  697,    0,  688,
      709,  709,  689,  710,  710,    0,  691,  711,  711,  701,
      699,  698,  712,  712,  702,  700,  713,  713,  714,  714,
      715,  715,  706,    0,  708,  716,  716,  717,  717,  718,

      718,  705,    0,  710,  719,  719,  720,  720,  721,  721,
      725,  725,  726,  726,  727,  727,  730,  730,    0,  715,
      728,  728,  711,  729,  729,  731,  731,  732,  732,  733,
      733,  734,  734,  735,  735,    0,  714,  720,  736,  736,
      737,  737,  738,  738,  727,    0,  726,    0,  725,  719,
      716,  721,  739,  739,  728,  741,  741,  729,  740,  740,
      742,  742,  745,  745,  746,  746,    0,  734,  736,  735,
      747,  747,  748,  748,  738,  749,  749,  750,  750,  751,
      751,    0,  752,  752,    0,  737,  739,  738,  740,    0,
      742,  753,  753,    0,  754,  754,  741,  755,  755,  756,

      756,    0,  747,  757,  757,  758,  758,  759,  759,  762,
      762,  750,    0,  751,  752,  745,  763,  763,  764,  764,
      748,  753,    0,  749,  754,  765,  765,  766,  766,  767,
      767,    0,  756,  768,  768,  757,  769,  769,    0,  758,
      770,  770,  771,  771,  755,  772,  772,    0,  759,    0,
      763,  773,  773,  774,  774,  775,  775,  777,  777,    0,
      778,  778,    0,  764,  779,  779,    0,  768,  769,    0,
      765,  780,  780,  781,  781,    0,  771,  782,  782,  783,
      783,  784,  784,  785,  785,  773,  786,  786,    0,  770,
      778,  787,  787,    0,  779,  788,  788,  789,  789,  790,

      790,    0,  791,  791,  792,  792,    0,  781,  793,  793,
        0,  782,  794,  794,  783,  785,  795,  795,  786,  796,
      796,  797,  797,  798,  798,  799,  799,    0,    0,    0,
        0,  788,    0,  790,    0,  789,  791,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  792,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  793,    0,    0,    0,    0,  796,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  798,  801,    0,
      801,  801,  801,  801,  801,  802,  802,  803,  803,  803,
      803,  803,  804,  804,  804,  804,  804,  805,  805,  805,

      805,  806,  806,  806,  806,  806,  806,  806,  807,    0,
      807,  807,  807,  807,  807,  808,  808,  809,  809,  809,
      809,  809,  809,  809,  810,  810,  810,  810,  810,  810,
      810,  811,  811,  811,  811,  811,  811,  811,  812,  812,
      812,  812,  812,  812,  812,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,

      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[173] =
    {   0,
1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,     };

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
++(yy_lp); \
goto find_rule; \
}

static int yy_more_offset = 0;
static int yy_prev_more_offset = 0;
#define yymore() ((yy_more_offset) = yy_flex_strlen( yytext ))
#define YY_NEED_STRLEN
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET \
	{ \
	(yy_more_offset) = (yy_prev_more_offset); \
	yyleng -= (yy_more_offset); \
	}
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char yytext[YYLMAX];
char *yytext_ptr;
#line 1 "src/thriftl.ll"
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/**
 * Thrift scanner.
 *
 * Tokenizes a thrift definition file.
 */
#line 27 "src/thriftl.ll"

/* This is redundant with some of the flags in Makefile.am, but it works
 * when people override CXXFLAGS without being careful. The pragmas are
 * the 'right' way to do it, but don't work on old-enough GCC (in particular
 * the GCC that ship on Mac OS X 10.6.5, *counter* to what the GNU docs say)
 *
 * We should revert the Makefile.am changes once Apple ships a reasonable
 * GCC.
 */
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wunused-function"
#pragma GCC diagnostic ignored "-Wunused-label"
#endif

#ifdef _MSC_VER
//warning C4102: 'find_rule' : unreferenced label
#pragma warning(disable:4102)
//avoid isatty redefinition
#define YY_NEVER_INTERACTIVE 1

#define YY_NO_UNISTD_H 1
#endif

#include <cassert>
#include <string>
#include <errno.h>
#include <stdlib.h>

#ifdef _MSC_VER
#include "windows/config.h"
#endif
#include "main.h"
#include "globals.h"
#include "parse/t_program.h"

/**
 * Must be included AFTER parse/t_program.h, but I can't remember why anymore
 * because I wrote this a while ago.
 */
#if defined(BISON_USE_PARSER_H_EXTENSION)
#include "thrifty.h"
#else
#include "thrifty.hh"
#endif

void thrift_reserved_keyword(char* keyword) {
  yyerror("Cannot use reserved language keyword: \"%s\"\n", keyword);
  exit(1);
}

void integer_overflow(char* text) {
  yyerror("This integer is too big: \"%s\"\n", text);
  exit(1);
}

void unexpected_token(char* text) {
  yyerror("Unexpected token in input: \"%s\"\n", text);
  exit(1);
}

/**
 * Provides the yylineno global, useful for debugging output
 */
/**
 * Our inputs are all single files, so no need for yywrap
 */
/**
 * We don't use it, and it fires up warnings at -Wall
 */
/**
 * Helper definitions, comments, constants, and whatnot
 */
#line 1668 "src/thriftl.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 122 "src/thriftl.ll"


#line 1856 "src/thriftl.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 801 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2646 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
					{
					(yy_full_match) = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = (yy_prev_more_offset); yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 124 "src/thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 125 "src/thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 126 "src/thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 127 "src/thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 128 "src/thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 130 "src/thriftl.ll"
{ return yytext[0];                }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 131 "src/thriftl.ll"
{ return yytext[0];                }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 133 "src/thriftl.ll"
{ yylval.iconst=0; return tok_int_constant; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 134 "src/thriftl.ll"
{ yylval.iconst=1; return tok_int_constant; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 136 "src/thriftl.ll"
{ return tok_namespace;            }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 137 "src/thriftl.ll"
{ return tok_cpp_namespace;        }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 138 "src/thriftl.ll"
{ return tok_cpp_include;          }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 139 "src/thriftl.ll"
{ return tok_cpp_type;             }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 140 "src/thriftl.ll"
{ return tok_java_package;         }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 141 "src/thriftl.ll"
{ return tok_cocoa_prefix;         }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 142 "src/thriftl.ll"
{ return tok_csharp_namespace;     }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 143 "src/thriftl.ll"
{ return tok_delphi_namespace;     }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 144 "src/thriftl.ll"
{ return tok_php_namespace;        }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 145 "src/thriftl.ll"
{ return tok_py_module;            }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 146 "src/thriftl.ll"
{ return tok_perl_package;         }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 147 "src/thriftl.ll"
{ return tok_ruby_namespace;       }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 148 "src/thriftl.ll"
{ return tok_smalltalk_category;   }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 149 "src/thriftl.ll"
{ return tok_smalltalk_prefix;     }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 150 "src/thriftl.ll"
{ return tok_xsd_all;              }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 151 "src/thriftl.ll"
{ return tok_xsd_optional;         }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 152 "src/thriftl.ll"
{ return tok_xsd_nillable;         }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 153 "src/thriftl.ll"
{ return tok_xsd_namespace;        }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 154 "src/thriftl.ll"
{ return tok_xsd_attrs;            }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 155 "src/thriftl.ll"
{ return tok_include;              }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 156 "src/thriftl.ll"
{ return tok_void;                 }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 157 "src/thriftl.ll"
{ return tok_bool;                 }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 158 "src/thriftl.ll"
{ return tok_byte;                 }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 159 "src/thriftl.ll"
{ return tok_i16;                  }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 160 "src/thriftl.ll"
{ return tok_i32;                  }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 161 "src/thriftl.ll"
{ return tok_i64;                  }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 162 "src/thriftl.ll"
{ return tok_double;               }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 163 "src/thriftl.ll"
{ return tok_string;               }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 164 "src/thriftl.ll"
{ return tok_binary;               }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 165 "src/thriftl.ll"
{
  pwarning(0, "\"slist\" is deprecated and will be removed in a future compiler version.  This type should be replaced with \"string\".\n");
  return tok_slist;
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 169 "src/thriftl.ll"
{
  pwarning(0, "\"senum\" is deprecated and will be removed in a future compiler version.  This type should be replaced with \"string\".\n");
  return tok_senum;
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 173 "src/thriftl.ll"
{ return tok_map;                  }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 174 "src/thriftl.ll"
{ return tok_list;                 }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 175 "src/thriftl.ll"
{ return tok_set;                  }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 176 "src/thriftl.ll"
{ return tok_oneway;               }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 177 "src/thriftl.ll"
{ return tok_typedef;              }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 178 "src/thriftl.ll"
{ return tok_struct;               }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 179 "src/thriftl.ll"
{ return tok_union;                }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 180 "src/thriftl.ll"
{ return tok_xception;             }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 181 "src/thriftl.ll"
{ return tok_extends;              }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 182 "src/thriftl.ll"
{ return tok_throws;               }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 183 "src/thriftl.ll"
{ return tok_service;              }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 184 "src/thriftl.ll"
{ return tok_enum;                 }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 185 "src/thriftl.ll"
{ return tok_const;                }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 186 "src/thriftl.ll"
{ return tok_required;             }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 187 "src/thriftl.ll"
{ return tok_optional;             }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 188 "src/thriftl.ll"
{
  pwarning(0, "\"async\" is deprecated.  It is called \"oneway\" now.\n");
  return tok_oneway;
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 192 "src/thriftl.ll"
{ return tok_reference;            }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 195 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 196 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 197 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 198 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 199 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 200 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 201 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 202 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 203 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 204 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 205 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 206 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 207 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 208 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 209 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 210 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 211 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 212 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 213 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 214 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 215 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 216 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 217 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 218 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 219 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 220 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 221 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 222 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 223 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 224 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 225 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 226 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 227 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 228 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 229 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 230 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 231 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 232 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 233 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 234 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 235 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 236 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 237 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 238 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 239 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 240 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 241 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 242 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 243 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 244 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 245 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 246 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 247 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 248 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 249 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 250 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 251 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 252 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 253 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 254 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 255 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 256 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 257 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 258 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 259 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 260 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 261 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 262 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 263 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 264 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 265 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 266 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 267 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 268 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 269 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 270 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 271 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 272 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 273 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 274 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 275 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 276 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 277 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 278 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 279 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 280 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 281 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 282 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 283 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 284 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 285 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 286 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 287 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 288 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 289 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 290 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 291 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 292 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 293 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 294 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 295 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 296 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 297 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 298 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 299 "src/thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 301 "src/thriftl.ll"
{
  errno = 0;
  yylval.iconst = strtoll(yytext, NULL, 10);
  if (errno == ERANGE) {
    integer_overflow(yytext);
  }
  return tok_int_constant;
}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 310 "src/thriftl.ll"
{
  errno = 0;
  char sign = yytext[0];
  int shift = sign == '0' ? 2 : 3;
  yylval.iconst = strtoll(yytext+shift, NULL, 16);
  if (sign == '-') {
    yylval.iconst = -yylval.iconst;
  }
  if (errno == ERANGE) {
    integer_overflow(yytext);
  }
  return tok_int_constant;
}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 324 "src/thriftl.ll"
{
  yylval.dconst = atof(yytext);
  return tok_dub_constant;
}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 329 "src/thriftl.ll"
{
  yylval.id = strdup(yytext);
  return tok_identifier;
}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 334 "src/thriftl.ll"
{
  yylval.id = strdup(yytext);
  return tok_st_identifier;
}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 339 "src/thriftl.ll"
{
  char mark = yytext[0];
  std::string result;
  for(;;)
  {
    int ch = yyinput();
    switch (ch) {
      case EOF:
        yyerror("End of file while read string at %d\n", yylineno);
        exit(1);
      case '\n':
        yyerror("End of line while read string at %d\n", yylineno - 1);
        exit(1);
      case '\\':
        ch = yyinput();
        switch (ch) {
          case 'r':
            result.push_back('\r');
            continue;
          case 'n':
            result.push_back('\n');
            continue;
          case 't':
            result.push_back('\t');
            continue;
          case '"':
            result.push_back('"');
            continue;
          case '\'':
            result.push_back('\'');
            continue;
          case '\\':
            result.push_back('\\');
            continue;
          default:
            yyerror("Bad escape character\n");
            return -1;
        }
        break;
      default:
        if (ch == mark) {
          yylval.id = strdup(result.c_str());
          return tok_literal;
        } else {
          result.push_back(ch);
        }
    }
  }
}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 390 "src/thriftl.ll"
{
 /* This does not show up in the parse tree. */
 /* Rather, the parser will grab it out of the global. */
  if (g_parse_mode == PROGRAM) {
    clear_doctext();
    g_doctext = strdup(yytext + 3);
    assert(strlen(g_doctext) >= 2);
    g_doctext[strlen(g_doctext) - 2] = ' ';
    g_doctext[strlen(g_doctext) - 1] = '\0';
    g_doctext = clean_up_doctext(g_doctext);
    g_doctext_lineno = yylineno;
    if( (g_program_doctext_candidate == NULL) && (g_program_doctext_status == INVALID)){
      g_program_doctext_candidate = strdup(g_doctext);
      g_program_doctext_lineno = g_doctext_lineno;
      g_program_doctext_status = STILL_CANDIDATE;
      pdebug("%s","program doctext set to STILL_CANDIDATE");
    }
  }
}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 410 "src/thriftl.ll"
{
  unexpected_token(yytext);
}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 415 "src/thriftl.ll"
{
  /* Catch-all to let us catch "*" in the parser. */
  return (int) yytext[0];
}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 420 "src/thriftl.ll"
ECHO;
	YY_BREAK
#line 2929 "src/thriftl.cc"
			case YY_STATE_EOF(INITIAL):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 801 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 801 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 800);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 420 "src/thriftl.ll"



/* vim: filetype=lex
*/

